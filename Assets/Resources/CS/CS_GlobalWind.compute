#pragma kernel GlobalWind

RWStructuredBuffer<float3> _WindBuffer;
uint _MaxCount;
float _TileSize;
float _TileDimension;
float _CornerX;
float _CornerY;
float _Time;
float _DirX;
float _DirY;

int _Octaves;
float _Frequency;
float _FrequencyBuildup;
float _Amplitude;
float _AmplitudeFalloff;
float _Speed;
float _SpeedBuildup;
float _Direction;
#include "../../INCLUDE/HL_Noise.hlsl"
#include "../../INCLUDE/HL_GraphicsHelper.hlsl"
[numthreads(1024, 1, 1)]
void GlobalWind(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _MaxCount)
        return;
    
    int coordX = id.x / _TileDimension;
    int coordY = id.x % _TileDimension;
    float2 posXZ = float2(coordX * _TileSize + _CornerX, coordY * _TileSize + _CornerY);
    posXZ = Rotate2D(posXZ, -_Direction);
    
    float freq = _Frequency;
    float amp = _Amplitude;
    float speedRamp = 0;
    float2 offset = float2(_Time * _Frequency * _Speed, 0);
    float noise = 0;
    for (int i = 0; i < _Octaves; i++)
    {
        noise +=  perlinNoise(posXZ * freq - offset, float2(12.9898, 78.233)) * amp;
        freq *= _FrequencyBuildup;
        amp *= _AmplitudeFalloff;
        speedRamp += _SpeedBuildup;
        offset = float2(_Time * freq * (_Speed + speedRamp), 0);
    }

    posXZ *= 0.2;
    float3 voronoi = voronoiNoise(float3(posXZ.x, -_Time * 0.05, posXZ.y), 12.9898);
    _WindBuffer[id.x] = float3(noise, (_Direction + noise / _Amplitude * 45) / 360.0,voronoi.x);

}