#pragma kernel CSMain

uint _NumTiles;
uint _NumTilesPerSide;
uint _Subdivisions;
StructuredBuffer<float3> _VertBuffer;
struct SpawnData
{
    float3 positionWS;
    float hash;
    float4 clumpInfo;
    float4 postureData;

};
RWStructuredBuffer<SpawnData> _SpawnBuffer;
RWStructuredBuffer<float3> _GroundNormalBuffer;


#include "../../INCLUDE/HL_Noise.hlsl"
float3 TriangleAverage(float3 a, float3 b, float3 c)
{
    return (a + b + c) / 3.0;
}

int2 GetCellCoord (uint i) 
{
    int2 centerCoord = int2(floor(i / _NumTilesPerSide), i % _NumTilesPerSide);
   return centerCoord;
}


uint GetOffsetedIndex(uint i, int2 offset)
{
   
    int2 coord = GetCellCoord(i);
    coord += offset;
    int index = coord.x * _NumTilesPerSide + coord.y;
    return (uint) index;

}
float3 GetVertAtCurrentTile(uint index, int vertIndex)
{
    return _VertBuffer[index * 4 + vertIndex];
}


void GetVertsAtCurrentTile(uint index, out float3 verts[4])
{
    [unroll]
    for (int i = 0; i < 4; i++)
        verts[i] = GetVertAtCurrentTile(index,i);
}

void GetNeighborAveragedVerts(uint index, out float3 verts[4])
{
    uint2 coord = GetCellCoord(index);
    if (coord.x >= _NumTilesPerSide - 1 || coord.y >= _NumTilesPerSide - 1
    || coord.x <=0 || coord.y <= 0)
    {
        GetVertsAtCurrentTile(index, verts);
        return;
    }
    uint neighborIndex[8];
    int i = 0;
    [unroll]
    for (int x = -1; x <= 1; x++)
    {
        [unroll]
        for (int y = -1; y <= 1; y++)
        {
            if (x == 0 && y == 0)
                continue;
            neighborIndex[i] = GetOffsetedIndex(index, int2(x, y));
            i++;
        }
    }
    
    // BotLeft
    float3 vblt0 =GetVertAtCurrentTile(neighborIndex[0], 2);
    float3 vbl1 = GetVertAtCurrentTile(neighborIndex[3], 3);
    float3 vbl3 = GetVertAtCurrentTile(neighborIndex[1], 1);
    verts[0] = TriangleAverage(vblt0, vbl1, vbl3);
    // BotRight
    float3 vbr0 = GetVertAtCurrentTile(neighborIndex[3], 2);
    float3 vbr1 = GetVertAtCurrentTile(neighborIndex[5], 3);
    float3 vbr2 = GetVertAtCurrentTile(neighborIndex[6], 0);
    verts[1] = TriangleAverage(vbr0, vbr1, vbr2);
    // TopRight
    float3 vtr1 = GetVertAtCurrentTile(neighborIndex[6], 3);
    float3 vtr2 = GetVertAtCurrentTile(neighborIndex[7], 0);
    float3 vtr3 = GetVertAtCurrentTile(neighborIndex[4], 1);
    verts[2] = TriangleAverage(vtr1, vtr2, vtr3);
    // TopLeft
    float3 vtl0 = GetVertAtCurrentTile(neighborIndex[1], 2);
    float3 vtl2 = GetVertAtCurrentTile(neighborIndex[4], 0);
    float3 vtl3 = GetVertAtCurrentTile(neighborIndex[2], 1);
    verts[3] = TriangleAverage(vtl0, vtl2, vtl3);

}

[numthreads(128,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _NumTiles )
        return;
    
    float3 verts[4];
    GetNeighborAveragedVerts(id.x, verts);
    uint iteration = _Subdivisions;

    
    float3 chunkSize = verts[2] - verts[0];
    float3 inc = chunkSize / iteration;
    
    int2 tileCoord = GetCellCoord(id.x);
    
    float3 groundNormalWS = normalize(cross(verts[1] - verts[0], verts[0] - verts[3]));
    _GroundNormalBuffer[id.x] = groundNormalWS;

    for (uint x = 0; x < iteration; x++)
    {
        for (uint z = 0; z < iteration; z++)
        {
            float2 noise = rand2dTo2d(float2(verts[0].x + inc.x * x, verts[0].z + inc.z * z));
            noise *= float2(inc.x, inc.z);
            float2 noisePercent = noise / float2(chunkSize.x, chunkSize.z);
            float r1 = lerp(verts[3].y, verts[2].y, float(x) / float(iteration) + noisePercent.x);
            float r2 = lerp(verts[0].y, verts[1].y, float(x) / float(iteration) + noisePercent.x);
            float y = lerp(r2, r1, float(z) / float(iteration) + noisePercent.y);
            float3 pos = float3(verts[0].x + inc.x * x + noise.x, y, verts[0].z + inc.z * z + noise.y);
            SpawnData o;
            o.positionWS = pos;
            o.hash = rand3dTo1d(pos * 78.233);
            o.clumpInfo = float4(0, 0, 0,0);
            o.postureData = float4(voronoiNoise(pos*5, 78.233).y, voronoiNoise(pos *2, 78.233).y, voronoiNoise(pos * 0.5, 78.233).y, voronoiNoise(pos * 0.2, 78.233).y);
            _SpawnBuffer[x * iteration + z + id.x * iteration * iteration] = o;
        }
    }

}
#pragma kernel GetChunkBuffer

int _ChunkIndexX;
int _ChunkIndexY;
int _ChunkPerSide;

RWStructuredBuffer<SpawnData> _ChunkSpawnBuffer;
[numthreads(128, 1, 1)]
void GetChunkBuffer(uint3 id : SV_DispatchThreadID)
{
    int numTilePerChunkSide = _NumTilesPerSide / _ChunkPerSide;
    uint numTilePerChunk = numTilePerChunkSide * numTilePerChunkSide;
    int instancePerTile = _Subdivisions * _Subdivisions;
    if (id.x >= (uint) numTilePerChunk * (uint)instancePerTile)
        return;
    int startIndex = (numTilePerChunkSide * _ChunkIndexX * _NumTilesPerSide + numTilePerChunkSide * _ChunkIndexY) * instancePerTile;
    
    uint tileStart = id.x * instancePerTile;
    for (int i = 0; i <  instancePerTile; i++)
        _ChunkSpawnBuffer[tileStart + i] = _SpawnBuffer[startIndex + tileStart + i + (id.x / numTilePerChunkSide) * (_NumTilesPerSide - numTilePerChunkSide) * instancePerTile];
}