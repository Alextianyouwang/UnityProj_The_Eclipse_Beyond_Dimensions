
#pragma kernel CSMain
RWTexture2D<float4> _LookupRT;
float _EarthRadius;
uint _NumOpticalDepthSample;
uint _Resolusion;
float _RS_Thickness, _RS_DensityFalloff,_MS_Thickness,_MS_DensityFalloff;
#include "../../INCLUDE/HL_AtmosphereHelper.hlsl"

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _Resolusion || id.y >= _Resolusion)
        return;
    float2 uv = id.xy / (float) _Resolusion;
    uv.x = -uv.x * 2 + 1;
    float angle = acos(uv.x);
    float2 dir = float2(sin(angle) ,cos(angle));
    uv.y *= _RS_Thickness;
    
    float3 rayOrigin = float3(dir, 0) * (uv.y+ _EarthRadius);
    float distThroughSphere = RaySphere(0, _EarthRadius + _RS_Thickness, rayOrigin, float3(0, 1, 0)).y;
    float rs_opticalDepth = OpticalDepth(rayOrigin, float3(0, 1, 0), distThroughSphere, 0, _RS_Thickness, _RS_DensityFalloff);
    float rs_localDensity = LocalDensity(rayOrigin, 0, _RS_Thickness, _RS_DensityFalloff);
    float ms_opticalDepth = OpticalDepth(rayOrigin, float3(0, 1, 0), distThroughSphere,0, _MS_Thickness, _MS_DensityFalloff);
    float ms_localDensity = LocalDensity(rayOrigin, 0, _MS_Thickness, _MS_DensityFalloff);
    
    _LookupRT[id.xy] = float4(rs_opticalDepth, rs_localDensity, ms_opticalDepth, ms_localDensity);
}
